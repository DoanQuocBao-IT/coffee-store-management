/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.raven.form;

import com.raven.entity.request.ComboboxDisplay;
import com.raven.entity.request.OrderItemRequest;
import com.raven.entity.request.OrderRequest;
import com.raven.main.ConnectMySQL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import com.raven.main.Session;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author RAVEN
 */
public class OrderJP extends javax.swing.JPanel {

    private int voucherDiscount = 0;
    DecimalFormat decimalFormat = new DecimalFormat("#,###");

    /**
     * Creates new form Form_1
     */
    public OrderJP() {
        initComponents();
        updateDB();
        getVoucher();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabelTotal = new javax.swing.JLabel();
        jLabelChange = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldAmount = new javax.swing.JTextField();
        jButtonCancel = new javax.swing.JButton();
        jButtonReceipt = new javax.swing.JButton();
        panelBorder1 = new com.raven.swing.PanelBorder();
        jLabel1 = new javax.swing.JLabel();
        spTable = new javax.swing.JScrollPane();
        table = new com.raven.swing.Table();
        spTable1 = new javax.swing.JScrollPane();
        tbl_sp = new com.raven.swing.Table();
        jLabel2 = new javax.swing.JLabel();
        jComboboxVoucher = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabelPercent = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabelTotalBill = new javax.swing.JLabel();

        jLabel3.setText("Tổng tiền (VND):");

        jLabel5.setText("Tiền nhận (VND):");

        jLabelTotal.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabelTotal.setText("0");

        jLabelChange.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabelChange.setText("0");

        jLabel8.setText("Tiền trả lại (VND):");

        jTextFieldAmount.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTextFieldAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldAmountFocusLost(evt);
            }
        });
        jTextFieldAmount.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextFieldAmountInputMethodTextChanged(evt);
            }
        });
        jTextFieldAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldAmountActionPerformed(evt);
            }
        });

        jButtonCancel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonCancel.setForeground(new java.awt.Color(255, 0, 51));
        jButtonCancel.setText("Hủy đặt ");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonReceipt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonReceipt.setForeground(new java.awt.Color(51, 255, 51));
        jButtonReceipt.setText("Thanh toán");
        jButtonReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReceiptActionPerformed(evt);
            }
        });

        panelBorder1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(127, 127, 127));
        jLabel1.setText("Danh sách sản phẩm được chọn");

        spTable.setBorder(null);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "Size", "Số lượng", "Giá"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setName("tbl_order"); // NOI18N
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        table.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tableInputMethodTextChanged(evt);
            }
        });
        spTable.setViewportView(table);

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spTable, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                .addContainerGap())
        );

        spTable1.setBorder(null);

        tbl_sp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "Size", "Giá"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_sp.setName("tbl_order"); // NOI18N
        tbl_sp.setShowGrid(false);
        tbl_sp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_spMouseClicked(evt);
            }
        });
        spTable1.setViewportView(tbl_sp);

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(127, 127, 127));
        jLabel2.setText("Danh sách sản phẩm");

        jComboboxVoucher.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboboxVoucher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboboxVoucherActionPerformed(evt);
            }
        });

        jLabel4.setText("Chọn mã giảm giá:");

        jLabel6.setText("Khuyến mãi nhận được (%):");

        jLabelPercent.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabelPercent.setText("0");

        jLabel7.setText("Thanh toán sau khi khuyến mãi (VND):");

        jLabelTotalBill.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabelTotalBill.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(spTable1, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelBorder1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(275, 275, 275)
                        .addComponent(jButtonReceipt))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelTotal))
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelTotalBill, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel8))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelChange)
                                    .addComponent(jTextFieldAmount)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboboxVoucher, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelPercent)))))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(panelBorder1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelTotal)
                                    .addComponent(jLabel3))
                                .addGap(0, 0, 0)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabelPercent))
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabelTotalBill)
                                .addGap(57, 57, 57))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboboxVoucher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(jTextFieldAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabelChange))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonReceipt, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                            .addComponent(jButtonCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spTable1, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReceiptActionPerformed
        String totalBillText = jLabelTotalBill.getText().replaceAll(",", "");
        OrderRequest order = new OrderRequest(Integer.parseInt(totalBillText), Session.getId());
        int idOrder = 0;
        if (createOrder(order)) {
            idOrder = getLatestIdOrder();
        }
        if (idOrder != 0) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            int rowCount = model.getRowCount();
            for (int row = 0; row < rowCount; row++) {
                int beverage = Integer.parseInt((String) model.getValueAt(row, 0).toString());
                int inventory = Integer.parseInt((String) model.getValueAt(row, 3).toString());
                OrderItemRequest item = new OrderItemRequest(inventory, beverage, idOrder);
                createOrderItem(item);
            }
        }

        JOptionPane.showMessageDialog(panelBorder1, "Gọi món thành công");
        DefaultTableModel recordTable = (DefaultTableModel) table.getModel();
        recordTable.setRowCount(0); // Xóa tất cả các hàng trong bảng
        updateTotalPrice(); // Cập nhật tổng giá sau khi xóa
        jLabelChange.setText(null);
        jTextFieldAmount.setText(null);
    }//GEN-LAST:event_jButtonReceiptActionPerformed
    private boolean updateInventoryVoucher(int id) {
        Connection sqlConn = ConnectMySQL.ConnectMySQL();
        try {
            PreparedStatement pst = sqlConn.prepareStatement("UPDATE voucher \n"
                    + "SET inventory = (SELECT inventory - 1 FROM (SELECT inventory FROM voucher WHERE id = ?) AS subquery)\n"
                    + "WHERE id = ?;");
            pst.setInt(1, id);
            pst.setInt(2, id);

            pst.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(OrderJP.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
        ConnectMySQL.closeConnection();
        return true;
    }

    private boolean createOrderItem(OrderItemRequest order) {
        Connection sqlConn = ConnectMySQL.ConnectMySQL();
        try {
            PreparedStatement pst = sqlConn.prepareStatement("insert into order_item(inventory,beverage,orders)value(?,?,?)");
            pst.setInt(1, order.getInventory());
            pst.setInt(2, order.getBeverage());
            pst.setInt(3, order.getOrders());
            pst.execute();
        } catch (SQLException ex) {
            Logger.getLogger(OrderJP.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
        ConnectMySQL.closeConnection();
        return true;
    }

    private int getLatestIdOrder() {
        int value = 0;
        Connection sqlConn = ConnectMySQL.ConnectMySQL();
        try {

            PreparedStatement pst = sqlConn.prepareStatement("select max(id)  from orders");
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                value = rs.getInt(1);
            }

        } catch (SQLException ex) {
            Logger.getLogger(OrderJP.class.getName()).log(Level.SEVERE, null, ex);
            return 0;
        }
        ConnectMySQL.closeConnection();
        return value;
    }

    private boolean createOrder(OrderRequest order) {
        ComboboxDisplay itemSelected = (ComboboxDisplay) jComboboxVoucher.getSelectedItem();

        Connection sqlConn = ConnectMySQL.ConnectMySQL();
        try {
            PreparedStatement pst = sqlConn.prepareStatement("insert into orders(payment,created_at,employee,voucher)value(?,?,?,?)");
            pst.setInt(1, order.getPayment());
            pst.setDate(2, new java.sql.Date(Calendar.getInstance().getTime().getTime()));
            pst.setInt(3, order.getEmployeeId());

            if (itemSelected != null) {
                pst.setInt(4, itemSelected.getId());
            } else {
                pst.setNull(4, java.sql.Types.INTEGER);
            }

            pst.execute();
        } catch (SQLException ex) {
            Logger.getLogger(OrderJP.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
        ConnectMySQL.closeConnection();
        return true;
    }
    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // TODO add your handling code here:
        // Hỏi xác nhận trước khi xóa dữ liệu
        int confirmation = JOptionPane.showConfirmDialog(null, "Bạn có muốn xóa tất cả dữ liệu trong bảng?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (confirmation == JOptionPane.YES_OPTION) {
            DefaultTableModel recordTable = (DefaultTableModel) table.getModel();
            recordTable.setRowCount(0); // Xóa tất cả các hàng trong bảng
            updateTotalPrice(); // Cập nhật tổng giá sau khi xóa
            jLabelChange.setText(null);
            jTextFieldAmount.setText(null);
        }
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void tbl_spMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_spMouseClicked
        JTable source = (JTable) evt.getSource();
        int row = source.rowAtPoint(evt.getPoint());
        int column = source.columnAtPoint(evt.getPoint());
        String name = source.getModel().getValueAt(row, 1) + "";
        String size = source.getModel().getValueAt(row, 2) + "";

//            JOptionPane.showMessageDialog(null, s);
        int dialogButton = JOptionPane.showConfirmDialog(null, "Bạn có muốn thêm " + name + "size " + size + " vào giỏ hàng", "WARNING", JOptionPane.YES_NO_OPTION);
        if (dialogButton == JOptionPane.YES_OPTION) {
//                System.out.print(s);
            DefaultTableModel recordTable = (DefaultTableModel) table.getModel();
            Vector columnData = new Vector();
            columnData.add(source.getModel().getValueAt(row, 0));
            if (findProduct(Integer.parseInt(source.getModel().getValueAt(row, 0).toString()))) {
                JOptionPane.showMessageDialog(panelBorder1, "Sản phẩm đã có trong giỏ hàng");
                return;
            }
            columnData.add(source.getModel().getValueAt(row, 1));
            columnData.add(source.getModel().getValueAt(row, 2));
//                    columnData.add(rs.getString("size_id"));
            columnData.add(1);
            columnData.add(source.getModel().getValueAt(row, 3));

            recordTable.addRow(columnData);
            updateTotalPrice();
        } else {
            remove(dialogButton);
        }

    }//GEN-LAST:event_tbl_spMouseClicked
    private boolean findProduct(int id) {
        DefaultTableModel recordTable = (DefaultTableModel) table.getModel();
        int rowCount = recordTable.getRowCount();
        for (int row1 = 0; row1 < rowCount; row1++) {
            if (id == Integer.parseInt(recordTable.getValueAt(row1, 0).toString())) {
                return true;
            }
        }
        return false;
    }
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        JTable source = (JTable) evt.getSource();
        int row = source.rowAtPoint(evt.getPoint());
        int quantity = (int) source.getModel().getValueAt(row, 3);
        int totalPrice = Integer.parseInt((String) source.getModel().getValueAt(row, 4).toString());
        int price = totalPrice / quantity;
        String input = (String) JOptionPane.showInputDialog(null, "Cập nhật số lượng",
                "Cập nhật số lượng", JOptionPane.QUESTION_MESSAGE, null, null, quantity);
        if (Integer.parseInt(input) < 0 || Integer.parseInt(input) > 20) {
            JOptionPane.showMessageDialog(panelBorder1, "Vui lòng chọn số lượng nằm trong khoảng 0 đến 20");
            return;
        } else if (Integer.parseInt(input) == 0) {
            DefaultTableModel model = (DefaultTableModel) source.getModel();
            model.removeRow(row);
        } else if (Integer.parseInt(input) != quantity) {

            source.getModel().setValueAt(Integer.parseInt(input), row, 3);
            source.getModel().setValueAt(Integer.parseInt(input) * price, row, 4);
//              source.getModel().setValueAt(quantity*price, row, 3);
        }
        updateTotalPrice();

    }//GEN-LAST:event_tableMouseClicked
    private void updateTotalPrice() {
        DefaultTableModel recordTable = (DefaultTableModel) table.getModel();
        int rowCount = recordTable.getRowCount();
        int sumPrice = 0;
        for (int row1 = 0; row1 < rowCount; row1++) {
            sumPrice += Integer.parseInt((String) recordTable.getValueAt(row1, 4).toString());
        }
        jLabelPercent.setText(String.valueOf(voucherDiscount));
        jLabelTotal.setText(String.valueOf(decimalFormat.format(sumPrice)));
        jLabelTotalBill.setText(String.valueOf(decimalFormat.format(sumPrice - (sumPrice * voucherDiscount) / 100)));
    }
    private void tableInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tableInputMethodTextChanged

    }//GEN-LAST:event_tableInputMethodTextChanged

    private void jComboboxVoucherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboboxVoucherActionPerformed
        ComboboxDisplay item = (ComboboxDisplay) jComboboxVoucher.getSelectedItem();
        // Kiểm tra nếu item là null thì gán voucherDiscount thành 0
        if (item == null) {
            voucherDiscount = 0;
        } else {
            voucherDiscount = item.getValue();
        }
        updateTotalPrice();
        calculateChange();
    }//GEN-LAST:event_jComboboxVoucherActionPerformed

    private void jTextFieldAmountInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextFieldAmountInputMethodTextChanged

    }//GEN-LAST:event_jTextFieldAmountInputMethodTextChanged

    private void jTextFieldAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldAmountActionPerformed
        calculateChange();
    }//GEN-LAST:event_jTextFieldAmountActionPerformed

    private void jTextFieldAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldAmountFocusLost
    }//GEN-LAST:event_jTextFieldAmountFocusLost
    private void calculateChange() {
        try {
            int value = Integer.parseInt(jTextFieldAmount.getText());
            if (value < 0) {
                JOptionPane.showMessageDialog(null, "Vui lòng nhập số nguyên dương");
                return;
            }
            int totalBill = 0;
            String totalBillText = jLabelTotalBill.getText().replaceAll(",", ""); // Loại bỏ dấu phân cách hàng nghìn
            if (!totalBillText.isEmpty()) {
                totalBill = Integer.parseInt(totalBillText);
            } else {
                // Xử lý trường hợp chuỗi rỗng
                JOptionPane.showMessageDialog(null, "Lỗi: Giá trị hóa đơn không hợp lệ");
                return;
            }

            int change = value - totalBill;
            jLabelChange.setText(decimalFormat.format(change));
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập số nguyên");
        }
    }

    public void updateDB() {
        try {
            Connection sqlConn = ConnectMySQL.ConnectMySQL();
            PreparedStatement pst = sqlConn.prepareStatement("select b.id, b.name,p.size,p.price,p.id as size_id from beverage b join properties p where b.id=p.beverage");

            ResultSet rs = pst.executeQuery();
            ResultSetMetaData stData = rs.getMetaData();
            int q = stData.getColumnCount();
            DefaultTableModel recordTable = (DefaultTableModel) tbl_sp.getModel();
            recordTable.setRowCount(0);
            while (rs.next()) {
                Vector columnData = new Vector();
                for (int i = 1; i <= q; i++) {
                    columnData.add(rs.getString("size_id"));
                    columnData.add(rs.getString("name"));
//                    columnData.add(rs.getString("size_id"));
                    columnData.add(rs.getString("size"));
                    columnData.add(rs.getString("price"));
                }
                recordTable.addRow(columnData);
            }
            ConnectMySQL.closeConnection();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    public void getVoucher() {
        try {
            Connection sqlConn = ConnectMySQL.ConnectMySQL();
            PreparedStatement pst = sqlConn.prepareStatement("select * from voucher \n"
                    + "where NOW() between start_at and finish_at and inventory>0");

            ResultSet rs = pst.executeQuery();
            DefaultComboBoxModel combo = new DefaultComboBoxModel();
            while (rs.next()) {
                combo.addElement(new ComboboxDisplay(rs.getInt(1), rs.getInt(4), rs.getString(2)));
            }
            jComboboxVoucher.setModel(combo);
            ComboboxDisplay item = (ComboboxDisplay) jComboboxVoucher.getSelectedItem();
            // Kiểm tra nếu item là null thì gán voucherDiscount thành 0
            if (item == null) {
                voucherDiscount = 0;
            } else {
                voucherDiscount = item.getValue();
            }

            ConnectMySQL.closeConnection();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonReceipt;
    private javax.swing.JComboBox<String> jComboboxVoucher;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelChange;
    private javax.swing.JLabel jLabelPercent;
    private javax.swing.JLabel jLabelTotal;
    private javax.swing.JLabel jLabelTotalBill;
    private javax.swing.JTextField jTextFieldAmount;
    private com.raven.swing.PanelBorder panelBorder1;
    private javax.swing.JScrollPane spTable;
    private javax.swing.JScrollPane spTable1;
    private com.raven.swing.Table table;
    private com.raven.swing.Table tbl_sp;
    // End of variables declaration//GEN-END:variables
}
